generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String          @unique
  email         String          @unique
  password      String          @default("null")
  image         String?
  OAuth_ID      String?
  verified      Boolean         @default(false)
  rating        Int?            @default(50)
  Token         Token[]
  UserInfo      UserInfo[]
  Friends       Friends[]
  Notifications Notifications[]
  marathons     Marathon[]
  leaderboard   MarathonLeaderboard[]
}

model UserInfo {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  user             User     @relation(fields: [userID], references: [id])
  userID           String   @db.ObjectId
  address          String?
  role             String?
  skills           String[]
  level            String?
  background_image String?  @default("https://e1.pxfuel.com/desktop-wallpaper/95/631/desktop-wallpaper-black-16-9.jpg")
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userID], references: [id])
  userID    String   @db.ObjectId
  userEmail String?
  token     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friends {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  user         User    @relation(fields: [userID], references: [id])
  userID       String  @db.ObjectId
  sender_name  String
  sender_email String
  sender_image String
  accepted     Boolean
}

model Notifications {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  user         User   @relation(fields: [userID], references: [id])
  userID       String @db.ObjectId
  sender_name  String
  sender_email String
  sender_image String
  message      String
}

model Match { 
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  room_id      String
  problem_id   Int
  winner       Json ?
  loser        Json ?
  p1           String 
  p2           String 
  rated        Boolean
  totalCases   Int
}
model Marathon { 
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  problems      Int[]
  solved       Int?
  user         User    @relation(fields: [userID], references: [id])
  userID       String  @db.ObjectId
}


model MarathonLeaderboard { 
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  problemsSolved   Int
  username         String
  image            String
  rating           Int 
  user             User    @relation(fields: [userID], references: [id])
  userID           String  @db.ObjectId
}